#summary a brief manual for extending openkad

= Introduction =

In this page, I will explain how to extend openkad by adding different operations and messages to it.


= Handlers =
Every incoming message is handled by the registered handlers.
All handlers must extend the class il.technion.ewolf.kbr.openkad.handlers.AbstractHandler

== Filters ==
In this tutorial we will look at the simplest example: The ping handler.
The job of the ping handler is to reply with a ping response to any incoming ping request.
First, we would like our PingHandler to notified only about PingRequests and no other messages. To do this we implement the getFilters method as such:
{{{
@Override
protected Collection<MessageFilter> getFilters() {
    return Arrays.asList(new MessageFilter[] {
        new TypeMessageFilter(PingRequest.class)
    });
}
}}}
In the getFilters method, we specify a list of all filters for our handler. In this case we have only one filter: a TypeMessageFilter initiated with the PingRequest message type. The TypeMessageFilter will filter all messages with types different to the type it was initiated with. In our case, all messages with type different from PingRequest will be filtered out and our handler will not handle them.

== Handle ==
After filtering out all unfit messages, our handler is left with the correct message it is willing to handle. The method completed is invoke every time a message has arrived and all the filters did not filter the message out. In our case, the method will be invoked whenever a PingRequest message has arrived. The completed method 2 arguments are:
 # The KadMessage that has arrived
 # An attachment, this will always be null
The following is the implementation of the completed method that send a PingResponse back to the requester:
{{{
@Override
public void completed(KadMessage msg, Void attachment) {
    PingResponse pingResponse =((PingRequest)msg).generateResponse(localNode);		
    try {
        kadServer.send(msg.getSrc(), pingResponse);
    } catch (IOException e) {
        // failed to send the message, nothing to do
        e.printStackTrace();
    }
}
}}}
In this method we generate the appropriate PingResponse out of the incoming PingRequest and send it to the back to the source using the kadServer object.